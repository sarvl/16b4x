SASM
Synthesizing Assembler
project documentation
revision 0

this document is used to describe how SASM works and how to modify it, not how to use it 
for usage help see './sasm -h' and corresponding options 

procedure declarations are not provided as they are already in the source
providing them here increases the risk that docs become incorrect 

for file management and log system, utilities not documented here are used 
as of revision 0, there exists no documentation of them other than header files

source structure
	command_line/
		files related to command line handling
		help strings
	process/
		processing phases, see below
	types/
		types and related procedures
	save.*
		output related files
	utils.*
		general purpose utilities that do not fit any category
	config.*
		config files
	warning.* 
		config files related to warnings
	main.cpp
		primary file

SASM divides processing into multiple independent steps
	1. command line handling 
	2. tokenization
	3. verification
	4. preprocessing
	5. code generation
	6. output

command line handling
	this phase reads command line arguments and sets up data in
		- Config.h
		- Warning.h
	command line defines are put into 'cmdl_defines' vector

	debug options (after '-D')
		t - tokenization  output
		v - verification  output
		p - preprocessing output
	capital letter means that after processing all debug options, sasm must abort

	file is organized as one switch case for each option
	more complex parsing is added as needed within each option

tokenization
	this phase transforms text from file into stream of tokens that is easier to work with
	
	since syntax is mostly the same in all context, only few things depend on mode, see below

	string and comment parsing are implemented as separate loops
	the rest is implemented as switch case

	'arg_list' keeps modes (if any), this is necessary since expressions and macro argument lists may be arbitrarly nested
	'expressions_started' and 'arg_lists_started' are used purely for better error messages

	reserved identifiers except for internal registers and macro keywords are implemented by checking contents of 'constexpr' table, later assigning proper value
	internal registers are special cased by check for 'R' as first character and then valid number
	there only 2 macro keywords so they are implemented as regular compare

	#, $, % can serve both as operators and prefixes while in expression, different action is taken if they are followed by identifier char or not
	see 'utils.cpp' for definition

	comments are fully removed from the stream

	where possible tokenization detects basic errors
		- operators outside of expressions
		- operators not separated from tokens
		- invalid identifiers
		- unterminated arg lists/expressions
		- wrongly nested arg lits/expressions

verification
	this phase checks whether syntax is correct such that later stages can focus on semantics

	if the line does not start with instruction, directive, label definition, macro or comment then it is error
	
	comments are already removed from the stream by tokenization
	macros are not supported yet 
	label definitions are copied to output, they cant be handled yet 

	instructions and directives have syntax defined through table (with explanation) that is used to check for proper arguments
	this reduces cases needed to check each instr/dir and simplifies adding new/fixing old

	errors' patterns are generated by loop in a lambda 

preprocessing
	this phase is used to evaluate all directives and collect labels

	most directives, all variables and all defines are handled here
	ALL uses of defines, variables, expression directives and '$' are evaluated here so codegen does not have to deal with them

	directives that require string may get %tostring so this requires special handling
	for now, all supported ones operate rougly the same so they are directed to 'dir_print'

	assert's condition is checked and processing is conditionally redirected to printing

	assigns/defines work as expected, using constant expression evaluation

	on 'if' 2 possibilities may occur
		1. cond = false => skip to elsif/else/end
		2. cond = true  => evaluate and then skip
	skip keeps stack of if/end and advances to matching elsif/else/end
	 no further verification happens on untaken path
	evaluate proceedes as if nothing happened until matching elsif/else/end are encountered	
	 then tid skips to matching end 
	
	'rps'/'rpe' (repeat blocks) work similar to 'if' but they keep additional stack to for iteration count

	%adr and %align have their argument evaluated and replaced with 'num' token
	same is not possible for %dw as it can use labels

code generation
	this phase transform instruction stream into bitstream 
	at this stage, only undefined branch error can occur

	switch for each instruction is provided here, same formats are merged together

output
	this phase transforms bit stream into final output format
	
	output format depends on option set in command line phase 
	handling of each format is fairly straightforward

